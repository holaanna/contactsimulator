// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/contactsimulator.h"
#include <RcppGSL.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// func_time_beta
double func_time_beta(const double& t, const double& t_intervention, const double& sum_beta, const double& epsilon, const double& omega, const double& beta_1);
static SEXP _contactsimulator_func_time_beta_try(SEXP tSEXP, SEXP t_interventionSEXP, SEXP sum_betaSEXP, SEXP epsilonSEXP, SEXP omegaSEXP, SEXP beta_1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type t_intervention(t_interventionSEXP);
    Rcpp::traits::input_parameter< const double& >::type sum_beta(sum_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_1(beta_1SEXP);
    rcpp_result_gen = Rcpp::wrap(func_time_beta(t, t_intervention, sum_beta, epsilon, omega, beta_1));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _contactsimulator_func_time_beta(SEXP tSEXP, SEXP t_interventionSEXP, SEXP sum_betaSEXP, SEXP epsilonSEXP, SEXP omegaSEXP, SEXP beta_1SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_contactsimulator_func_time_beta_try(tSEXP, t_interventionSEXP, sum_betaSEXP, epsilonSEXP, omegaSEXP, beta_1SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// simulate_NHPP_next_event
double simulate_NHPP_next_event(const double t_now, const double t_intervention, const double sum_beta, const double epsilon, const double omega, const double b1, double t_max);
static SEXP _contactsimulator_simulate_NHPP_next_event_try(SEXP t_nowSEXP, SEXP t_interventionSEXP, SEXP sum_betaSEXP, SEXP epsilonSEXP, SEXP omegaSEXP, SEXP b1SEXP, SEXP t_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const double >::type t_now(t_nowSEXP);
    Rcpp::traits::input_parameter< const double >::type t_intervention(t_interventionSEXP);
    Rcpp::traits::input_parameter< const double >::type sum_beta(sum_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type t_max(t_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_NHPP_next_event(t_now, t_intervention, sum_beta, epsilon, omega, b1, t_max));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _contactsimulator_simulate_NHPP_next_event(SEXP t_nowSEXP, SEXP t_interventionSEXP, SEXP sum_betaSEXP, SEXP epsilonSEXP, SEXP omegaSEXP, SEXP b1SEXP, SEXP t_maxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_contactsimulator_simulate_NHPP_next_event_try(t_nowSEXP, t_interventionSEXP, sum_betaSEXP, epsilonSEXP, omegaSEXP, b1SEXP, t_maxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// circle_line_intersections
DataFrame circle_line_intersections(double circle_x, double circle_y, double r, int n_line, DataFrame grid_lines);
static SEXP _contactsimulator_circle_line_intersections_try(SEXP circle_xSEXP, SEXP circle_ySEXP, SEXP rSEXP, SEXP n_lineSEXP, SEXP grid_linesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type circle_x(circle_xSEXP);
    Rcpp::traits::input_parameter< double >::type circle_y(circle_ySEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type n_line(n_lineSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type grid_lines(grid_linesSEXP);
    rcpp_result_gen = Rcpp::wrap(circle_line_intersections(circle_x, circle_y, r, n_line, grid_lines));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _contactsimulator_circle_line_intersections(SEXP circle_xSEXP, SEXP circle_ySEXP, SEXP rSEXP, SEXP n_lineSEXP, SEXP grid_linesSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_contactsimulator_circle_line_intersections_try(circle_xSEXP, circle_ySEXP, rSEXP, n_lineSEXP, grid_linesSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// func_arcs_attributes
DataFrame func_arcs_attributes(DataFrame set_points, NumericMatrix& pop_grid, double r, double x_min, double y_min, double grid_size, double n_row_grid, double n_col_grid);
static SEXP _contactsimulator_func_arcs_attributes_try(SEXP set_pointsSEXP, SEXP pop_gridSEXP, SEXP rSEXP, SEXP x_minSEXP, SEXP y_minSEXP, SEXP grid_sizeSEXP, SEXP n_row_gridSEXP, SEXP n_col_gridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< DataFrame >::type set_points(set_pointsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type pop_grid(pop_gridSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type x_min(x_minSEXP);
    Rcpp::traits::input_parameter< double >::type y_min(y_minSEXP);
    Rcpp::traits::input_parameter< double >::type grid_size(grid_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type n_row_grid(n_row_gridSEXP);
    Rcpp::traits::input_parameter< double >::type n_col_grid(n_col_gridSEXP);
    rcpp_result_gen = Rcpp::wrap(func_arcs_attributes(set_points, pop_grid, r, x_min, y_min, grid_size, n_row_grid, n_col_grid));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _contactsimulator_func_arcs_attributes(SEXP set_pointsSEXP, SEXP pop_gridSEXP, SEXP rSEXP, SEXP x_minSEXP, SEXP y_minSEXP, SEXP grid_sizeSEXP, SEXP n_row_gridSEXP, SEXP n_col_gridSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_contactsimulator_func_arcs_attributes_try(set_pointsSEXP, pop_gridSEXP, rSEXP, x_minSEXP, y_minSEXP, grid_sizeSEXP, n_row_gridSEXP, n_col_gridSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// f
double f(double x0, double E, double A);
static SEXP _contactsimulator_f_try(SEXP x0SEXP, SEXP ESEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type E(ESEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(f(x0, E, A));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _contactsimulator_f(SEXP x0SEXP, SEXP ESEXP, SEXP ASEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_contactsimulator_f_try(x0SEXP, ESEXP, ASEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// g
double g(double x0, double E, double A, double B);
static SEXP _contactsimulator_g_try(SEXP x0SEXP, SEXP ESEXP, SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type E(ESEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(g(x0, E, A, B));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _contactsimulator_g(SEXP x0SEXP, SEXP ESEXP, SEXP ASEXP, SEXP BSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_contactsimulator_g_try(x0SEXP, ESEXP, ASEXP, BSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Inv_trans
double Inv_trans(double& r, double x_lo, double x_hi, double t, double l);
static SEXP _contactsimulator_Inv_trans_try(SEXP rSEXP, SEXP x_loSEXP, SEXP x_hiSEXP, SEXP tSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type x_lo(x_loSEXP);
    Rcpp::traits::input_parameter< double >::type x_hi(x_hiSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(Inv_trans(r, x_lo, x_hi, t, l));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _contactsimulator_Inv_trans(SEXP rSEXP, SEXP x_loSEXP, SEXP x_hiSEXP, SEXP tSEXP, SEXP lSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_contactsimulator_Inv_trans_try(rSEXP, x_loSEXP, x_hiSEXP, tSEXP, lSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// BTFinv1
NumericVector BTFinv1(double E, double A, double t0);
static SEXP _contactsimulator_BTFinv1_try(SEXP ESEXP, SEXP ASEXP, SEXP t0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type E(ESEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    rcpp_result_gen = Rcpp::wrap(BTFinv1(E, A, t0));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _contactsimulator_BTFinv1(SEXP ESEXP, SEXP ASEXP, SEXP t0SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_contactsimulator_BTFinv1_try(ESEXP, ASEXP, t0SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// E_to_I
double E_to_I(int EI_model, double E, double mu_lat, double var_lat);
static SEXP _contactsimulator_E_to_I_try(SEXP EI_modelSEXP, SEXP ESEXP, SEXP mu_latSEXP, SEXP var_latSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type EI_model(EI_modelSEXP);
    Rcpp::traits::input_parameter< double >::type E(ESEXP);
    Rcpp::traits::input_parameter< double >::type mu_lat(mu_latSEXP);
    Rcpp::traits::input_parameter< double >::type var_lat(var_latSEXP);
    rcpp_result_gen = Rcpp::wrap(E_to_I(EI_model, E, mu_lat, var_lat));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _contactsimulator_E_to_I(SEXP EI_modelSEXP, SEXP ESEXP, SEXP mu_latSEXP, SEXP var_latSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_contactsimulator_E_to_I_try(EI_modelSEXP, ESEXP, mu_latSEXP, var_latSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// beta_by_age
double beta_by_age(int age, NumericVector beta_by_age_vector);
static SEXP _contactsimulator_beta_by_age_try(SEXP ageSEXP, SEXP beta_by_age_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type age(ageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_by_age_vector(beta_by_age_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_by_age(age, beta_by_age_vector));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _contactsimulator_beta_by_age(SEXP ageSEXP, SEXP beta_by_age_vectorSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_contactsimulator_beta_by_age_try(ageSEXP, beta_by_age_vectorSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Samp_dis
double Samp_dis(int kern_model, double ru, double alpha1, double alpha2);
static SEXP _contactsimulator_Samp_dis_try(SEXP kern_modelSEXP, SEXP ruSEXP, SEXP alpha1SEXP, SEXP alpha2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type kern_model(kern_modelSEXP);
    Rcpp::traits::input_parameter< double >::type ru(ruSEXP);
    Rcpp::traits::input_parameter< double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    rcpp_result_gen = Rcpp::wrap(Samp_dis(kern_model, ru, alpha1, alpha2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _contactsimulator_Samp_dis(SEXP kern_modelSEXP, SEXP ruSEXP, SEXP alpha1SEXP, SEXP alpha2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_contactsimulator_Samp_dis_try(kern_modelSEXP, ruSEXP, alpha1SEXP, alpha2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Sub_set
NumericVector Sub_set(NumericVector tr, NumericVector time);
static SEXP _contactsimulator_Sub_set_try(SEXP trSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tr(trSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(Sub_set(tr, time));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _contactsimulator_Sub_set(SEXP trSEXP, SEXP timeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_contactsimulator_Sub_set_try(trSEXP, timeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// distanc
NumericVector distanc(NumericMatrix dat, NumericVector d);
static SEXP _contactsimulator_distanc_try(SEXP datSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(distanc(dat, d));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _contactsimulator_distanc(SEXP datSEXP, SEXP dSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_contactsimulator_distanc_try(datSEXP, dSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fu
double fu(double t1, double t2, double l);
static SEXP _contactsimulator_fu_try(SEXP t1SEXP, SEXP t2SEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< double >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(fu(t1, t2, l));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _contactsimulator_fu(SEXP t1SEXP, SEXP t2SEXP, SEXP lSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_contactsimulator_fu_try(t1SEXP, t2SEXP, lSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _contactsimulator_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("double(*func_time_beta)(const double&,const double&,const double&,const double&,const double&,const double&)");
        signatures.insert("double(*simulate_NHPP_next_event)(const double,const double,const double,const double,const double,const double,double)");
        signatures.insert("DataFrame(*circle_line_intersections)(double,double,double,int,DataFrame)");
        signatures.insert("DataFrame(*func_arcs_attributes)(DataFrame,NumericMatrix&,double,double,double,double,double,double)");
        signatures.insert("double(*f)(double,double,double)");
        signatures.insert("double(*g)(double,double,double,double)");
        signatures.insert("double(*Inv_trans)(double&,double,double,double,double)");
        signatures.insert("NumericVector(*BTFinv1)(double,double,double)");
        signatures.insert("double(*E_to_I)(int,double,double,double)");
        signatures.insert("double(*beta_by_age)(int,NumericVector)");
        signatures.insert("double(*Samp_dis)(int,double,double,double)");
        signatures.insert("NumericVector(*Sub_set)(NumericVector,NumericVector)");
        signatures.insert("NumericVector(*distanc)(NumericMatrix,NumericVector)");
        signatures.insert("double(*fu)(double,double,double)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _contactsimulator_RcppExport_registerCCallable() { 
    R_RegisterCCallable("contactsimulator", "_contactsimulator_func_time_beta", (DL_FUNC)_contactsimulator_func_time_beta_try);
    R_RegisterCCallable("contactsimulator", "_contactsimulator_simulate_NHPP_next_event", (DL_FUNC)_contactsimulator_simulate_NHPP_next_event_try);
    R_RegisterCCallable("contactsimulator", "_contactsimulator_circle_line_intersections", (DL_FUNC)_contactsimulator_circle_line_intersections_try);
    R_RegisterCCallable("contactsimulator", "_contactsimulator_func_arcs_attributes", (DL_FUNC)_contactsimulator_func_arcs_attributes_try);
    R_RegisterCCallable("contactsimulator", "_contactsimulator_f", (DL_FUNC)_contactsimulator_f_try);
    R_RegisterCCallable("contactsimulator", "_contactsimulator_g", (DL_FUNC)_contactsimulator_g_try);
    R_RegisterCCallable("contactsimulator", "_contactsimulator_Inv_trans", (DL_FUNC)_contactsimulator_Inv_trans_try);
    R_RegisterCCallable("contactsimulator", "_contactsimulator_BTFinv1", (DL_FUNC)_contactsimulator_BTFinv1_try);
    R_RegisterCCallable("contactsimulator", "_contactsimulator_E_to_I", (DL_FUNC)_contactsimulator_E_to_I_try);
    R_RegisterCCallable("contactsimulator", "_contactsimulator_beta_by_age", (DL_FUNC)_contactsimulator_beta_by_age_try);
    R_RegisterCCallable("contactsimulator", "_contactsimulator_Samp_dis", (DL_FUNC)_contactsimulator_Samp_dis_try);
    R_RegisterCCallable("contactsimulator", "_contactsimulator_Sub_set", (DL_FUNC)_contactsimulator_Sub_set_try);
    R_RegisterCCallable("contactsimulator", "_contactsimulator_distanc", (DL_FUNC)_contactsimulator_distanc_try);
    R_RegisterCCallable("contactsimulator", "_contactsimulator_fu", (DL_FUNC)_contactsimulator_fu_try);
    R_RegisterCCallable("contactsimulator", "_contactsimulator_RcppExport_validate", (DL_FUNC)_contactsimulator_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_contactsimulator_func_time_beta", (DL_FUNC) &_contactsimulator_func_time_beta, 6},
    {"_contactsimulator_simulate_NHPP_next_event", (DL_FUNC) &_contactsimulator_simulate_NHPP_next_event, 7},
    {"_contactsimulator_circle_line_intersections", (DL_FUNC) &_contactsimulator_circle_line_intersections, 5},
    {"_contactsimulator_func_arcs_attributes", (DL_FUNC) &_contactsimulator_func_arcs_attributes, 8},
    {"_contactsimulator_f", (DL_FUNC) &_contactsimulator_f, 3},
    {"_contactsimulator_g", (DL_FUNC) &_contactsimulator_g, 4},
    {"_contactsimulator_Inv_trans", (DL_FUNC) &_contactsimulator_Inv_trans, 5},
    {"_contactsimulator_BTFinv1", (DL_FUNC) &_contactsimulator_BTFinv1, 3},
    {"_contactsimulator_E_to_I", (DL_FUNC) &_contactsimulator_E_to_I, 4},
    {"_contactsimulator_beta_by_age", (DL_FUNC) &_contactsimulator_beta_by_age, 2},
    {"_contactsimulator_Samp_dis", (DL_FUNC) &_contactsimulator_Samp_dis, 4},
    {"_contactsimulator_Sub_set", (DL_FUNC) &_contactsimulator_Sub_set, 2},
    {"_contactsimulator_distanc", (DL_FUNC) &_contactsimulator_distanc, 2},
    {"_contactsimulator_fu", (DL_FUNC) &_contactsimulator_fu, 3},
    {"_contactsimulator_RcppExport_registerCCallable", (DL_FUNC) &_contactsimulator_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_contactsimulator(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
