// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// func_time_beta
double func_time_beta(const double& t, const double& t_intervention, const double& sum_beta, const double& epsilon, const double& omega);
RcppExport SEXP _contactsimulator_func_time_beta(SEXP tSEXP, SEXP t_interventionSEXP, SEXP sum_betaSEXP, SEXP epsilonSEXP, SEXP omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type t_intervention(t_interventionSEXP);
    Rcpp::traits::input_parameter< const double& >::type sum_beta(sum_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type omega(omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(func_time_beta(t, t_intervention, sum_beta, epsilon, omega));
    return rcpp_result_gen;
END_RCPP
}
// simulate_NHPP_next_event
double simulate_NHPP_next_event(const double t_now, const double t_intervention, const double sum_beta, const double epsilon, const double omega, double t_max);
RcppExport SEXP _contactsimulator_simulate_NHPP_next_event(SEXP t_nowSEXP, SEXP t_interventionSEXP, SEXP sum_betaSEXP, SEXP epsilonSEXP, SEXP omegaSEXP, SEXP t_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type t_now(t_nowSEXP);
    Rcpp::traits::input_parameter< const double >::type t_intervention(t_interventionSEXP);
    Rcpp::traits::input_parameter< const double >::type sum_beta(sum_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type t_max(t_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_NHPP_next_event(t_now, t_intervention, sum_beta, epsilon, omega, t_max));
    return rcpp_result_gen;
END_RCPP
}
// circle_line_intersections
DataFrame circle_line_intersections(double circle_x, double circle_y, double r, int n_line, DataFrame grid_lines);
RcppExport SEXP _contactsimulator_circle_line_intersections(SEXP circle_xSEXP, SEXP circle_ySEXP, SEXP rSEXP, SEXP n_lineSEXP, SEXP grid_linesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type circle_x(circle_xSEXP);
    Rcpp::traits::input_parameter< double >::type circle_y(circle_ySEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type n_line(n_lineSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type grid_lines(grid_linesSEXP);
    rcpp_result_gen = Rcpp::wrap(circle_line_intersections(circle_x, circle_y, r, n_line, grid_lines));
    return rcpp_result_gen;
END_RCPP
}
// func_arcs_attributes
DataFrame func_arcs_attributes(DataFrame set_points, NumericMatrix& pop_grid, double r, double x_min, double y_min, double grid_size, double n_row_grid, double n_col_grid);
RcppExport SEXP _contactsimulator_func_arcs_attributes(SEXP set_pointsSEXP, SEXP pop_gridSEXP, SEXP rSEXP, SEXP x_minSEXP, SEXP y_minSEXP, SEXP grid_sizeSEXP, SEXP n_row_gridSEXP, SEXP n_col_gridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type set_points(set_pointsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type pop_grid(pop_gridSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type x_min(x_minSEXP);
    Rcpp::traits::input_parameter< double >::type y_min(y_minSEXP);
    Rcpp::traits::input_parameter< double >::type grid_size(grid_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type n_row_grid(n_row_gridSEXP);
    Rcpp::traits::input_parameter< double >::type n_col_grid(n_col_gridSEXP);
    rcpp_result_gen = Rcpp::wrap(func_arcs_attributes(set_points, pop_grid, r, x_min, y_min, grid_size, n_row_grid, n_col_grid));
    return rcpp_result_gen;
END_RCPP
}
// f
double f(double x0, double E, double A);
RcppExport SEXP _contactsimulator_f(SEXP x0SEXP, SEXP ESEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type E(ESEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(f(x0, E, A));
    return rcpp_result_gen;
END_RCPP
}
// BTFinv1
NumericVector BTFinv1(double E, double A, double t0);
RcppExport SEXP _contactsimulator_BTFinv1(SEXP ESEXP, SEXP ASEXP, SEXP t0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type E(ESEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    rcpp_result_gen = Rcpp::wrap(BTFinv1(E, A, t0));
    return rcpp_result_gen;
END_RCPP
}
// E_to_I
double E_to_I(int EI_model, double E, double mu_lat, double var_lat);
RcppExport SEXP _contactsimulator_E_to_I(SEXP EI_modelSEXP, SEXP ESEXP, SEXP mu_latSEXP, SEXP var_latSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type EI_model(EI_modelSEXP);
    Rcpp::traits::input_parameter< double >::type E(ESEXP);
    Rcpp::traits::input_parameter< double >::type mu_lat(mu_latSEXP);
    Rcpp::traits::input_parameter< double >::type var_lat(var_latSEXP);
    rcpp_result_gen = Rcpp::wrap(E_to_I(EI_model, E, mu_lat, var_lat));
    return rcpp_result_gen;
END_RCPP
}
// beta_by_age
double beta_by_age(int age, NumericVector beta_by_age_vector);
RcppExport SEXP _contactsimulator_beta_by_age(SEXP ageSEXP, SEXP beta_by_age_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type age(ageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_by_age_vector(beta_by_age_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_by_age(age, beta_by_age_vector));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_contactsimulator_func_time_beta", (DL_FUNC) &_contactsimulator_func_time_beta, 5},
    {"_contactsimulator_simulate_NHPP_next_event", (DL_FUNC) &_contactsimulator_simulate_NHPP_next_event, 6},
    {"_contactsimulator_circle_line_intersections", (DL_FUNC) &_contactsimulator_circle_line_intersections, 5},
    {"_contactsimulator_func_arcs_attributes", (DL_FUNC) &_contactsimulator_func_arcs_attributes, 8},
    {"_contactsimulator_f", (DL_FUNC) &_contactsimulator_f, 3},
    {"_contactsimulator_BTFinv1", (DL_FUNC) &_contactsimulator_BTFinv1, 3},
    {"_contactsimulator_E_to_I", (DL_FUNC) &_contactsimulator_E_to_I, 4},
    {"_contactsimulator_beta_by_age", (DL_FUNC) &_contactsimulator_beta_by_age, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_contactsimulator(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
