#!/rds/project/cag1/rds-cag1-general/epidem-programs/R/bin/Rscript

# print(Sys.getenv())
library(Rcpp)
library(RcppGSL)
library(geosphere)
library(raster)
library(rgdal)
library(sp)
library(graphics)
library(grDevices)
library(stats)
library(parallel)
library(contactsimulator)


# Combined raster
size=500
f<- paste0("rast_NSW_",size,".tif")
rast<- raster(f)
size<- raster::res(rast)[1]
# Extract infos on the grid


n_row_grid=nrow_grid=raster::nrow(rast)
n_col_grid=ncol_grid=raster::ncol(rast)
grid_size=raster::res(rast)[1]     # Resolution

n_line=(nrow_grid+1) + (ncol_grid +1)  # Number of grid  lines

x_min=raster::xmin(rast)  # min max of the bounding box
x_max=raster::xmax(rast)

y_min=raster::ymin(rast)
y_max=raster::ymax(rast)

pop_per_grid=round(raster::values(rast)*size^2)
pop_per_grid[is.na(pop_per_grid)]=0
mat=matrix(pop_per_grid,nrow = nrow_grid, byrow = TRUE)
pop_grid=apply(mat,2,rev)     # population per grid

# Structure of the grid
x=seq(x_min,x_max,grid_size)
y=seq(y_min,y_max,grid_size)

grid_lines=array(0,c(n_line,6))
for(i in 1:n_line){
  if(i<=(nrow_grid +1)){
    grid_lines[i,]=c(i,1,x[1],y[i],x[length(x)],y[i])
  }
  else{
    grid_lines[i,]=c(i,2,x[i-length(y)],y[1],x[i-length(y)],y[length(y)])
  }
}

grid_lines=as.data.frame(grid_lines)
colnames(grid_lines)<- c("indx","orient_line","coor_x_1","coor_y_1","coor_x_2","coor_y_2")

# Individual raster
f<- paste0("rast_farms_NSW_",size,".tif")
f_rast<- raster(f)
pop=round(raster::values(f_rast)*size^2)
pop[is.na(pop)]=0
mat=matrix(pop,nrow = nrow_grid, byrow = TRUE)
f_rast=apply(mat,2,rev)
y<- paste0("rast_backy_NSW_",size,".tif")
b_rast<- raster(y)
pop=round(raster::values(b_rast)*size^2)
pop[is.na(pop)]=0
mat=matrix(pop,nrow = nrow_grid, byrow = TRUE)
b_rast=apply(mat,2,rev)


farm_pos_cat<- read.table("farm_pos_cat.txt",fill=T,header = T)
farm_pos_cat<- farm_pos_cat[with(farm_pos_cat,order(farm_pos_cat$cat)),]

vis_int_per_cat<- data.frame(cat=LETTERS[1:5],vis_int=c(360,360,30,30,30))

#============================================================================================#
#                       Generate plot for simulation using draws from posterior
#============================================================================================#

argument = commandArgs(T)
k=as.numeric(argument)[1]
process=as.numeric(argument)[2]

times<- seq(2556,3098,30)
#times<- c(times, 365+times)
#obs<- c(212,90,57)
times1<- c(-100,times)
OBS<- array(0,c(2,length(times)))

#Risk of each cell
#indx<- which(pop_grid>0,arr.ind = T)
#Risk of each cell
#indx<- which(pop_grid>0,arr.ind = T)
Risk_e<- Risk_i<- Risk_r<- array(0,c(nrow(farm_pos_cat),length(times)+2))
Risk_e<- as.data.frame(Risk_e)
Risk_e[,1:2]<- farm_pos_cat[,1:2]


Risk_i<- as.data.frame(Risk_i)
Risk_i[,1:2]<- farm_pos_cat[,1:2]

Risk_r<- as.data.frame(Risk_r)
Risk_r[,1:2]<- farm_pos_cat[,1:2]


#1<- read.table("1.txt",sep=" ",header =T,stringsAsFactors = F)
dat=as.data.frame(read.table("Dout"))
# pop_grid <- as.matrix(read.table("pop_grid",sep=" ",header =F,fill = T))
# grid_lines <- read.table("grid_line.txt",sep=" ",header =T,stringsAsFactors = F)


Sim1=Sim=array(0,c(1000,9))
Li=vector("list",length = 9)
M=read.table("parameters_current.txt",fill=T)
sour=read.table("infected_source_current.txt",fill=T)
prop=numeric(nrow(sour))
for(k in 1:nrow(sour)){
  kk=ss=0
  for( i in 1:ncol(sour)){
    if(sour[k,i]!=9999){
      kk = kk +1
      if(all(as.numeric(dat[i,c(10,11)])==as.numeric(dat[sour[k,i]+1,c(10,11)]))){
        ss = ss +1
      }
    }
  }
  prop[k]=ss/(ss+kk)
}

samp=sample(50000:nrow(M),1);Param=data.frame(epsilon=M[samp,1],beta=M[samp,2],c=M[samp,5],b1=M[samp,6],alpha1=M[samp,7],alpha2=M[samp,8],t0=M[samp,9],omega=M[samp,10],mu_lat=M[samp,3],var_lat=M[samp,4])

epsilon <- Param$epsilon
beta <- Param$beta
alpha1 <- Param$alpha1
alpha2 <- Param$alpha2
mu_lat <- Param$mu_lat
var_lat <- Param$var_lat
omega <- Param$omega
c<- Param$c
t0<- min(times)-30
b1 <- Param$b1
prop <- mean(prop)

#Input

t_b<-max(times) + 2
t_max <- max(times)
EI_model <- 1                        # 500X500 resolution
kern_model <- 3
rad <- 1000                          # Sweep radius
sweep_prop <- c(1,.7)               #Backyard assessment
rate_det <- c(1,.5)                # sweep proportion
back_p<- c(1,0.5)
grid_size<- size
t_obs<- min(times)
 ind_det<- c(90,180,360)

for(i in 1:1){
  param=data.frame(alpha1=1/alpha1[i],alpha2=alpha2[i], beta=beta[i], b1=b1[i], epsilon=epsilon[i], omega=omega[i], mu_lat=mu_lat[i], var_lat=var_lat[i], t0=t0[i], c=c[i], gama=prop)
    epi1<- Simulate_contact_control(f_rast,b_rast,farm_pos_cat,vis_int_per_cat,param, grid_lines, pop_grid,t_b=t_b,t_max = t_max, EI_model = EI_model,kern_model = kern_model,rad = rad,t_obs = 5000,sweep_prop = sweep_prop,rate_det = rate_det,grid_size = grid_size,m_start = 200)
   epi<- Simulate_contact_control(f_rast,b_rast,farm_pos_cat,vis_int_per_cat,param, grid_lines, pop_grid,t_b=t_b,t_max = t_max, EI_model = EI_model,kern_model = kern_model,rad = rad,t_obs = t_obs,sweep_prop = sweep_prop,rate_det = rate_det,grid_size = grid_size,m_start = 200)

  # sim[i]<- length(which(epi$t_i<=118))
  # sim1[i]<- length(which(epi$t_r<=118))
  # Sim[i,3*(k-1)+l]<- length(which(epi$t_r<=118))
  # Sim1[i,3*(k-1)+l]<- length(which(epi$t_i<=118))
  for(j in 1:(length(times))){
     indx1<- subset(epi,t_e<=times1[j+1] & t_e>times1[j])
      indx2<- subset(epi1,t_e<=times1[j+1] & t_e>times1[j])
    if(length(indx2)==0){
      # OBS[1,j]<- length(indx1)
      OBS[2,j]<- length(indx2)
    }
    else{
      # OBS[1,j]<- nrow(indx1)
      OBS[2,j]<- nrow(indx2)
    }

    if(length(indx1)==0){
      # OBS[1,j]<- length(indx1)
      OBS[1,j]<- length(indx1)
    }
    else{
      # OBS[1,j]<- nrow(indx1)
      OBS[1,j]<- nrow(indx1)
    }

    for (ll in 1:nrow(Risk_e)) {
      id<- nrow(subset(epi1,epi1[,"t_e"]<=times1[j+1] & epi1[,"t_e"]>times1[1] & row==Risk_e[ll,1] & col==Risk_e[ll,2]))
      idi<- nrow(subset(epi1,epi1[,"t_i"]<=times1[j+1] & epi1[,"t_i"]>times1[1] & row==Risk_e[ll,1] & col==Risk_e[ll,2]))
      idr<- nrow(subset(epi1,epi1[,"t_r"]<=times1[j+1] & epi1[,"t_r"]>times1[1] & row==Risk_e[ll,1] & col==Risk_e[ll,2]))
      if(length(id)==0){
        id=0
      }
       if(length(idi)==0){
        idi=0
      }
       if(length(idr)==0){
        idr=0
      }
      Risk_e[ll,j+2]<- id
      Risk_i[ll,j+2]<- idi
      Risk_r[ll,j+2]<- idr
    }

  }
}


 #write.table(OBS,paste("worst_control",process,".txt",sep = ""),row.names = FALSE,col.names = FALSE)
  write.table(OBS,paste("detected_snapshot",process,".txt",sep = ""),row.names = FALSE,col.names = FALSE)


write.table(Risk_e,paste("risk_E_snapshot",process,".txt",sep = ""),row.names = FALSE,col.names = FALSE)
write.table(Risk_i,paste("risk_I_snapshot",process,".txt",sep = ""),row.names = FALSE,col.names = FALSE)
write.table(Risk_r,paste("risk_R_snapshot",process,".txt",sep = ""),row.names = FALSE,col.names = FALSE)
