// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_contactsimulator_RCPPEXPORTS_H_GEN_
#define RCPP_contactsimulator_RCPPEXPORTS_H_GEN_

#include <RcppGSL.h>
#include <Rcpp.h>

namespace contactsimulator {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("contactsimulator", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("contactsimulator", "_contactsimulator_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in contactsimulator");
            }
        }
    }

    inline double func_time_beta(const double& t, const double& t_intervention, const double& sum_beta, const double& epsilon, const double& omega, const double& beta_1) {
        typedef SEXP(*Ptr_func_time_beta)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_func_time_beta p_func_time_beta = NULL;
        if (p_func_time_beta == NULL) {
            validateSignature("double(*func_time_beta)(const double&,const double&,const double&,const double&,const double&,const double&)");
            p_func_time_beta = (Ptr_func_time_beta)R_GetCCallable("contactsimulator", "_contactsimulator_func_time_beta");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_func_time_beta(Shield<SEXP>(Rcpp::wrap(t)), Shield<SEXP>(Rcpp::wrap(t_intervention)), Shield<SEXP>(Rcpp::wrap(sum_beta)), Shield<SEXP>(Rcpp::wrap(epsilon)), Shield<SEXP>(Rcpp::wrap(omega)), Shield<SEXP>(Rcpp::wrap(beta_1)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double simulate_NHPP_next_event(const double t_now, const double t_intervention, const double sum_beta, const double epsilon, const double omega, const double b1, double t_max) {
        typedef SEXP(*Ptr_simulate_NHPP_next_event)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_simulate_NHPP_next_event p_simulate_NHPP_next_event = NULL;
        if (p_simulate_NHPP_next_event == NULL) {
            validateSignature("double(*simulate_NHPP_next_event)(const double,const double,const double,const double,const double,const double,double)");
            p_simulate_NHPP_next_event = (Ptr_simulate_NHPP_next_event)R_GetCCallable("contactsimulator", "_contactsimulator_simulate_NHPP_next_event");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_simulate_NHPP_next_event(Shield<SEXP>(Rcpp::wrap(t_now)), Shield<SEXP>(Rcpp::wrap(t_intervention)), Shield<SEXP>(Rcpp::wrap(sum_beta)), Shield<SEXP>(Rcpp::wrap(epsilon)), Shield<SEXP>(Rcpp::wrap(omega)), Shield<SEXP>(Rcpp::wrap(b1)), Shield<SEXP>(Rcpp::wrap(t_max)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline DataFrame circle_line_intersections(double circle_x, double circle_y, double r, int n_line, DataFrame grid_lines) {
        typedef SEXP(*Ptr_circle_line_intersections)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_circle_line_intersections p_circle_line_intersections = NULL;
        if (p_circle_line_intersections == NULL) {
            validateSignature("DataFrame(*circle_line_intersections)(double,double,double,int,DataFrame)");
            p_circle_line_intersections = (Ptr_circle_line_intersections)R_GetCCallable("contactsimulator", "_contactsimulator_circle_line_intersections");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_circle_line_intersections(Shield<SEXP>(Rcpp::wrap(circle_x)), Shield<SEXP>(Rcpp::wrap(circle_y)), Shield<SEXP>(Rcpp::wrap(r)), Shield<SEXP>(Rcpp::wrap(n_line)), Shield<SEXP>(Rcpp::wrap(grid_lines)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<DataFrame >(rcpp_result_gen);
    }

    inline DataFrame func_arcs_attributes(DataFrame set_points, NumericMatrix& pop_grid, double r, double x_min, double y_min, double grid_size, double n_row_grid, double n_col_grid) {
        typedef SEXP(*Ptr_func_arcs_attributes)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_func_arcs_attributes p_func_arcs_attributes = NULL;
        if (p_func_arcs_attributes == NULL) {
            validateSignature("DataFrame(*func_arcs_attributes)(DataFrame,NumericMatrix&,double,double,double,double,double,double)");
            p_func_arcs_attributes = (Ptr_func_arcs_attributes)R_GetCCallable("contactsimulator", "_contactsimulator_func_arcs_attributes");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_func_arcs_attributes(Shield<SEXP>(Rcpp::wrap(set_points)), Shield<SEXP>(Rcpp::wrap(pop_grid)), Shield<SEXP>(Rcpp::wrap(r)), Shield<SEXP>(Rcpp::wrap(x_min)), Shield<SEXP>(Rcpp::wrap(y_min)), Shield<SEXP>(Rcpp::wrap(grid_size)), Shield<SEXP>(Rcpp::wrap(n_row_grid)), Shield<SEXP>(Rcpp::wrap(n_col_grid)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<DataFrame >(rcpp_result_gen);
    }

    inline double f(double x0, double E, double A) {
        typedef SEXP(*Ptr_f)(SEXP,SEXP,SEXP);
        static Ptr_f p_f = NULL;
        if (p_f == NULL) {
            validateSignature("double(*f)(double,double,double)");
            p_f = (Ptr_f)R_GetCCallable("contactsimulator", "_contactsimulator_f");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_f(Shield<SEXP>(Rcpp::wrap(x0)), Shield<SEXP>(Rcpp::wrap(E)), Shield<SEXP>(Rcpp::wrap(A)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double g(double x0, double E, double A, double B) {
        typedef SEXP(*Ptr_g)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_g p_g = NULL;
        if (p_g == NULL) {
            validateSignature("double(*g)(double,double,double,double)");
            p_g = (Ptr_g)R_GetCCallable("contactsimulator", "_contactsimulator_g");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_g(Shield<SEXP>(Rcpp::wrap(x0)), Shield<SEXP>(Rcpp::wrap(E)), Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(B)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double Inv_trans(double& r, double x_lo, double x_hi, double t, double l) {
        typedef SEXP(*Ptr_Inv_trans)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_Inv_trans p_Inv_trans = NULL;
        if (p_Inv_trans == NULL) {
            validateSignature("double(*Inv_trans)(double&,double,double,double,double)");
            p_Inv_trans = (Ptr_Inv_trans)R_GetCCallable("contactsimulator", "_contactsimulator_Inv_trans");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Inv_trans(Shield<SEXP>(Rcpp::wrap(r)), Shield<SEXP>(Rcpp::wrap(x_lo)), Shield<SEXP>(Rcpp::wrap(x_hi)), Shield<SEXP>(Rcpp::wrap(t)), Shield<SEXP>(Rcpp::wrap(l)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline NumericVector BTFinv1(double E, double A, double t0) {
        typedef SEXP(*Ptr_BTFinv1)(SEXP,SEXP,SEXP);
        static Ptr_BTFinv1 p_BTFinv1 = NULL;
        if (p_BTFinv1 == NULL) {
            validateSignature("NumericVector(*BTFinv1)(double,double,double)");
            p_BTFinv1 = (Ptr_BTFinv1)R_GetCCallable("contactsimulator", "_contactsimulator_BTFinv1");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_BTFinv1(Shield<SEXP>(Rcpp::wrap(E)), Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(t0)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline double E_to_I(int EI_model, double E, double mu_lat, double var_lat) {
        typedef SEXP(*Ptr_E_to_I)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_E_to_I p_E_to_I = NULL;
        if (p_E_to_I == NULL) {
            validateSignature("double(*E_to_I)(int,double,double,double)");
            p_E_to_I = (Ptr_E_to_I)R_GetCCallable("contactsimulator", "_contactsimulator_E_to_I");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_E_to_I(Shield<SEXP>(Rcpp::wrap(EI_model)), Shield<SEXP>(Rcpp::wrap(E)), Shield<SEXP>(Rcpp::wrap(mu_lat)), Shield<SEXP>(Rcpp::wrap(var_lat)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double beta_by_age(int age, NumericVector beta_by_age_vector) {
        typedef SEXP(*Ptr_beta_by_age)(SEXP,SEXP);
        static Ptr_beta_by_age p_beta_by_age = NULL;
        if (p_beta_by_age == NULL) {
            validateSignature("double(*beta_by_age)(int,NumericVector)");
            p_beta_by_age = (Ptr_beta_by_age)R_GetCCallable("contactsimulator", "_contactsimulator_beta_by_age");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_beta_by_age(Shield<SEXP>(Rcpp::wrap(age)), Shield<SEXP>(Rcpp::wrap(beta_by_age_vector)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double Samp_dis(int kern_model, double ru, double alpha1, double alpha2) {
        typedef SEXP(*Ptr_Samp_dis)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_Samp_dis p_Samp_dis = NULL;
        if (p_Samp_dis == NULL) {
            validateSignature("double(*Samp_dis)(int,double,double,double)");
            p_Samp_dis = (Ptr_Samp_dis)R_GetCCallable("contactsimulator", "_contactsimulator_Samp_dis");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Samp_dis(Shield<SEXP>(Rcpp::wrap(kern_model)), Shield<SEXP>(Rcpp::wrap(ru)), Shield<SEXP>(Rcpp::wrap(alpha1)), Shield<SEXP>(Rcpp::wrap(alpha2)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline NumericVector Sub_set(NumericVector tr, NumericVector time) {
        typedef SEXP(*Ptr_Sub_set)(SEXP,SEXP);
        static Ptr_Sub_set p_Sub_set = NULL;
        if (p_Sub_set == NULL) {
            validateSignature("NumericVector(*Sub_set)(NumericVector,NumericVector)");
            p_Sub_set = (Ptr_Sub_set)R_GetCCallable("contactsimulator", "_contactsimulator_Sub_set");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Sub_set(Shield<SEXP>(Rcpp::wrap(tr)), Shield<SEXP>(Rcpp::wrap(time)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector distanc(NumericMatrix dat, NumericVector d) {
        typedef SEXP(*Ptr_distanc)(SEXP,SEXP);
        static Ptr_distanc p_distanc = NULL;
        if (p_distanc == NULL) {
            validateSignature("NumericVector(*distanc)(NumericMatrix,NumericVector)");
            p_distanc = (Ptr_distanc)R_GetCCallable("contactsimulator", "_contactsimulator_distanc");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_distanc(Shield<SEXP>(Rcpp::wrap(dat)), Shield<SEXP>(Rcpp::wrap(d)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline double fu(double t1, double t2, double l) {
        typedef SEXP(*Ptr_fu)(SEXP,SEXP,SEXP);
        static Ptr_fu p_fu = NULL;
        if (p_fu == NULL) {
            validateSignature("double(*fu)(double,double,double)");
            p_fu = (Ptr_fu)R_GetCCallable("contactsimulator", "_contactsimulator_fu");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fu(Shield<SEXP>(Rcpp::wrap(t1)), Shield<SEXP>(Rcpp::wrap(t2)), Shield<SEXP>(Rcpp::wrap(l)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

}

#endif // RCPP_contactsimulator_RCPPEXPORTS_H_GEN_
